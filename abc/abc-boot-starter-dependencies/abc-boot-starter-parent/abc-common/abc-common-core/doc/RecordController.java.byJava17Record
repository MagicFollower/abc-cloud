package com.abc.business.web.controller;

import com.abc.system.common.constant.SystemRetCodeConstants;
import com.abc.system.common.exception.business.BizException;
import com.abc.system.common.page.PageResponse;
import com.abc.system.common.response.ResponseData;
import com.abc.system.common.response.ResponseProcessor;
import com.google.common.collect.Lists;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;

/**
 * RecordController
 *
 * @Description RecordController
 * @Author -
 * @Date 2023/8/24 14:01
 * @Version 1.0
 */
@Slf4j
@RequiredArgsConstructor
@RestController
@RequestMapping(path = "/record")
public class RecordController {

    @GetMapping(path = "/api1")
    public ResponseData<PageResponse> api01(@RequestBody UserReq<UserVO> req) {
        final ResponseProcessor<PageResponse> rp = new ResponseProcessor<>();
        UserVO vo = req.vo();
        UserRequest<UserVO> userRequest;
        try {
            // generate XxxRequest for ServiceLayer
            userRequest = new UserRequest<>(vo);
        } catch (BizException e) {
            log.error(">>>>>>>>|api01|error|code:{},message:{}|<<<<<<<<", e.getErrorCode(), e.getMessage());
            return rp.setErrorMsg(e.getErrorCode(), e.getMessage());
        }
        // call service by [userRequest] and get result [DTO]
        // ...

        // return DTO
        String newName = "Anonymous["+vo.name()+"]";
        Integer newAge = Math.negateExact(vo.age());
        ArrayList<UserDTO> dtoList = Lists.newArrayList(new UserDTO(newName, newAge));
        final long total = 1L;

        PageResponse pageResponse = new PageResponse();
        pageResponse.setData(dtoList);
        pageResponse.setTotal(total);
        return rp.setData(pageResponse);
    }

    public record UserDTO(
            String name,
            Integer age
    ) {
    }

    public record UserVO(
            String name,
            Integer age
    ) {
    }

    public record UserReq<T>(
            T vo
    ) {
    }

    public record UserRequest<T>(
            T vo
    ) {
        public UserRequest {
            final UserVO vo_ = (UserVO) vo;
            if (vo == null || StringUtils.isEmpty(vo_.name()) || vo_.age() == null) {
                throw new BizException(SystemRetCodeConstants.PARAMETER_EXISTS_ERROR);
            }
        }
    }
}
